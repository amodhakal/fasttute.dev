
Phase 0: The Foundation (The Non-AI Core) [Build a tool that is useful even without any AI. Prove the core user experience is solid]:
  ✔ A single input field to accept a YouTube URL. @done(25-10-01 21:25)
  ✔ An embedded video player next to a scrollable transcript. @done(25-10-01 21:25)
  ✔ Fetching the transcript using a public library. @done(25-10-01 21:25)
  ✔ Clicking any sentence in the transcript jumps the video player to that exact timestamp. @done(25-10-01 21:25)
  ✔ A clean, responsive UI. @done(25-10-01 21:25)

Phase 1: The First Spark of Magic (Core AI Feature) [Integrate AI to solve the single biggest navigation problem: lack of structure]:
  ✔ A backend API endpoint that takes a transcript. @done(25-10-02 02:06)
  ✔ Results are cached to avoid redundant API calls for the same video. @done(25-10-03 00:06)
  ✔ The API calls an LLM with a prompt to generate a JSON object of detailed chapter markers. @done(25-10-03 00:26)
  ☐ The generated chapters are displayed on the frontend, allowing for one-click navigation.

Phase 2: The Retention Engine (Building the Asset) [Give users a reason to come back. Transform the tool from a one-off gadget into a personal library]:
  ☐ Implement user authentication with Clerk.
  ☐ When an authenticated user enhances a video, it is automatically saved to their personal library.
  ☐ A dedicated dashboard page (`/library`) where users can see and search their saved videos.

Phase 3: The Growth Engine (Product-Led Growth) [Turn users into evangelists. Build the mechanisms for the product to spread itself]:
  ✔ Make every enhanced video page a public, sharable URL (`fastiture.dev/v/...`). @done(25-10-01 21:25)
  ☐ The shared page shows the full enhanced experience to non-users, with a clear CTA to sign up.
    - If the user is not signed up, show the CTA
  ☐ A browser extension that allows users to enhance a video with one click directly from YouTube.


Additional:
  ☐ Update the video shower to use the youtube id, such that when getting back to homepage, the video can be processed with it
    - or get the youtube id from the video id status
  ☐ Implement event handling
    - Let the user know that it hasn't been optimized if in pending
    - When an error or ai processing occurs, let the frontend page for that video know and do the correct thing.
    – When a video isn't AI processed, show the w/o AI processed and let the viewer know they can generate a better one
      - Should be restricted to the owner later on.